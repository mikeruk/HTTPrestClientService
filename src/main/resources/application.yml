spring:
  application:
    name: "HTTPrestClientService"
  cloud:
    loadbalancer:
      zone: "eu-west-1a"

           # the name THIS app registers under
eureka:
  client:
    service-url:
      defaultZone: "http://localhost:8761/eureka"
    register-with-eureka: true
    fetch-registry: true


# ────────────────────────────────────────────────────────────────────────────
# This is your custom namespace. You could name it anything (e.g. "client:",
# "remote-api:", "user-service:", etc.). Here we chose "dservice:" to remind us
# that this is the base URL for our “dservice” backend, but we dont user it any more.
# Now we added also service-id:backend-service , because we will use Eureka to resolve by service-id, which is 'backend-service'.
dservice:
  #base-url: http://localhost:8081 - hard coded URL is no longer needed, because we will use Eureka and resolve by service-id:
  service-id: "backend-service"
  use-eureka: true
  authToken: "superSecretToken"



logging:
  level:
    org.springframework.web.service.invoker: DEBUG
    org.springframework.web.reactive.function.client.ExchangeFunctions: DEBUG
    org.springframework.cloud.loadbalancer: DEBUG
    org.springframework.cloud.loadbalancer.core: DEBUG
    org.springframework.cloud.loadbalancer.client: DEBUG
    org.springframework.cloud.loadbalancer.core.ZonePreferenceServiceInstanceListSupplier: DEBUG
    org.springframework.cloud.loadbalancer.core.ReactorServiceInstanceLoadBalancer: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,beans
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
  distribution:
    # turn on histograms (so backends like Prometheus can compute quantiles)
    percentiles-histogram:
      http.server.requests: true
      http.client.requests: true
    # also compute specific percentiles
    percentiles:
      http.server.requests: [ 0.5, 0.95, 0.99 ]
      http.client.requests: [ 0.5, 0.95, 0.99 ]
